#!/usr/bin/env node --harmony
'use strict';

const program = require('commander'),
      version = require('../package.json').version;

let processed = false;

program
  .version(version, '-v, --version')
  .usage('[command]')
  .description('A tool to manage tips');

program
  .command('publish [paths...]')
  .description('publish new tips (or updates existing ones)')
  .option('-l, --log [level]', 'enable logging in a specific level', parseInt, 1)
  .action((paths, context) => {
    require('../lib/publish')(paths, context);
    processed = true;
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $> tipit publish *.*');
    console.log('    $> tipit publish ./tips/git/*.*');
    console.log('    $> tipit publish ./tips/git/add-submodule.md, ./tips/javascript/*.md');
    console.log();
  })
  .on('log', function(level) {
    global.TIPIT_LOG_LEVEL = parseInt(level) || 1;
  });

program
  .command('export [paths...]')
  .description('export a tip to multiple formats')
  .option('-H, --html', 'export to html format')
  .option('-J, --json', 'export to json format')
  .option('-X, --xml', 'export to xml format')
  .option('-M, --markdown', 'export to markdown format')
  .option('-P, --plain', 'export to plain format')
  .option('-l, --log [level]', 'enable logging in a specific level', parseInt, 1)
  .option('-i, --include-hidden', 'includes hidden folders and files')
  .option('-c, --case-sensitive', 'search should be case sensitive')
  .option('-r, --root <directory>', 'paths root location')
  .action((paths, context) => {
    require('../lib/export')(paths, context);
    processed = true;
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $> tipit export *.*');
    console.log('    $> tipit export -H .');
    console.log('    $> tipit export -m ./tips/git/*.* ./tips/javascript/*.*');
    console.log('    $> tipit export -j ./tips/git/add-submodule.md');
    console.log();
  })
  .on('log', function(level) {
    global.TIPIT_LOG_LEVEL = parseInt(level) || 1;
  });

program
  .command('list [tags...]')
  .description('display a list of tips')
  .option('-l, --log [level]', 'enable logging in a specific level', parseInt, 1)
  .action((tags, context) => {
    require('../lib/list')(tags, context);
    processed = true;
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $> tipit list git,submodule');
    console.log('    $> tipit list git java javascript');
    console.log('    $> tipit list javascript');
    console.log();
  })
  .on('log', function(level) {
    global.TIPIT_LOG_LEVEL = parseInt(level) || 1;
  });

program.parse(process.argv);

if (module !== require.main) {
  module.exports = {
    publish: require('../lib/publish'),
    export: require('../lib/export'),
    list: require('../lib/list')
  };
} else if (!processed) {
  console.log('  tipit is expecting one of the following commands:');
  console.log();
  console.log('    publish [options] [paths...] publish new tips (or updates existing ones)');
  console.log('    export [options] [paths...]  export a tip to multiple formats');
  console.log('    list [options] [tags...]     display a list of tips');
  console.log();
  console.log('  for more information use:');
  console.log('    tipit [-h] [--help]');
}

